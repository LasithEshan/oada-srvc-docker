version: '2.1'

services:

  startup:
    depends_on:
      - zookeeper
      - kafka
      - arangodb
    build: ./startup
    restart: always
    container_name: startup
    ports:
      - "80"
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}
      # set RESETDATABASE to "yes" if you want to drop database on startup and recreate
      - RESETDATABASE=${RESETDATABASE:-no}

  # proxy routes OAuth2 requests (/auth, /code) to auth service,
  # and the rest to main http-handlers.  TODO: add load balancing with multiple handlers.
  proxy:
    depends_on:
      - auth
      - http-handler
      - well-known
    build: ./proxy
    container_name: proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./proxy/dev-sites-enabled/:/etc/nginx/sites-templates/
      - ./proxy/dev-certs/:/certs/
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
      - letsencrypt_www_data:/var/www/letsencrypt
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}
      - DOMAIN=${DOMAIN:-localhost}
    command:
      - /entrypoint.sh

  auth:
    depends_on:
      - startup
    build: ./auth
    container_name: auth
    restart: always
    ports:
      - "80"
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}
    command:
      - /entrypoint.sh

  # http-handler is in charge of maintaining connectiongs to clients and starting
  # the first message for a request into Kafka
  http-handler:
    depends_on:
      - startup
    build: ./http-handler
    restart: always
    container_name: http-handler
    ports:
      - "80"
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}
      - IGNORE_SCOPE=${IGNORE_SCOPE:-""}

  write-handler:
    depends_on:
      - startup
    build: ./write-handler
    restart: always
    container_name: write-handler
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  token-lookup:
    depends_on:
      - startup
    build: ./token-lookup
    restart: always
    container_name: token-lookup
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  rev-graph-update:
    depends_on:
      - startup
    build: ./rev-graph-update
    restart: always
    container_name: rev-graph-update
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  graph-lookup:
    depends_on:
      - startup
    build: ./graph-lookup
    restart: always
    container_name: graph-lookup
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  well-known:
    depends_on:
      - startup
    build: ./well-known
    restart: always
    container_name: well-known
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    ports:
      - "80"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  tests:
    depends_on:
      - startup
    build: ./tests
    container_name: tests
    volumes:
      - .:/code
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  # admin container has all the service names and volumes mapped, so you
  # can interact with them easily from this service.
  admin:
    build: ./admin
    volumes:
      - ./oada-srvc-docker-config.js:/oada-srvc-docker-config.js
      - arangodb_data:/volumes/arangodb
      - arangodb_apps_data:/volumes/arangodb_apps
      - zookeeper_data:/volumes/zookeeper
      - kafka_data:/volumes/kafka
      - .:/code
    command: bash
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-""}

  # letsencrypt will go get HTTPS certificates for you if DOMAIN is not localhost
  letsencrypt:
    build: ./letsencrypt
    container_name: letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt_www_data:/var/www/letsencrypt
      - ./proxy/dev-certs:/certs
    environment:
      - SERVER_CONTAINER=proxy
      - DOMAINS=${DOMAIN:-localhost}
      - EMAIL=${LETSENCRYPTEMAIL:-info@openag.io}
      - WEBROOT_PATH=/var/www/letsencrypt
      - CERTS_PATH=/certs/${DOMAIN:-nodomain}
      - CHECK_FREQ=7
    restart: unless-stopped

  # Arango is the main backend where core data and graph is stored
  arangodb:
    image: arangodb
    container_name: arangodb
    restart: always
    volumes:
      - arangodb_data:/var/lib/arangodb3
      - arangodb_data:/var/lib/arangodb3-apps
    ports:
      - "8529:8529"
    environment:
      # - ARANGO_RANDOM_ROOT_PASSWORD=1
      - ARANGO_NO_AUTH=1


  # zookeeper and kafka entries are based on:
  # from https://github.com/wurstmeister/kafka-docker/blob/master/docker-compose.yml
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - "2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - "9092"
    restart: always
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"  # NOTE: this only allows services inside this docker network
      KAFKA_ADVERTISED_PORT: "9092"        # to connect to kafka.  Set to machine's IP if you want external.
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka_data:/var/lib/kafka

volumes:
  arangodb_data:
  arangodb_apps_data:
  kafka_data:
  zookeeper_data:
  letsencrypt_www_data:
